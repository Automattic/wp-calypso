references:
  shared-environment: &shared-environment
    CIRCLE_ARTIFACTS: /tmp/artifacts
    CIRCLE_TEST_REPORTS: /tmp/test_results

  docker-image: &docker-image
    - image: circleci/node:10.10.0-browsers

  setup-results-and-artifacts: &setup-results-and-artifacts
    name: Create Directories for Results and Artifacts
    command: |
      mkdir -p                             \
        "~/jest-cache"                     \
        "$CIRCLE_ARTIFACTS/translate"      \
        "$CIRCLE_TEST_REPORTS/client"      \
        "$CIRCLE_TEST_REPORTS/eslint"      \
        "$CIRCLE_TEST_REPORTS/integration" \
        "$CIRCLE_TEST_REPORTS/server"

  restore-jest-cache: &restore-jest-cache
    name: Restore Jest cache
    keys:
      - v1-jest-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_NODE_INDEX }}/{{ .Environment.CIRCLE_NODE_TOTAL }}-{{ .Branch }}-{{ .Revision }}
      - v1-jest-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_NODE_INDEX }}/{{ .Environment.CIRCLE_NODE_TOTAL }}-{{ .Branch }}
      - v1-jest-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_NODE_INDEX }}/{{ .Environment.CIRCLE_NODE_TOTAL }}-master
      - v1-jest-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_NODE_INDEX }}/{{ .Environment.CIRCLE_NODE_TOTAL }}
  save-jest-cache: &save-jest-cache
    name: Save Jest cache
    key: v1-jest-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_NODE_INDEX }}/{{ .Environment.CIRCLE_NODE_TOTAL }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - ~/jest-cache

  restore-git-cache: &restore-git-cache
    name: Restore git cache
    keys:
      - v2-git-{{ .Branch }}-{{ .Revision }}
      - v2-git-{{ .Branch }}
      - v2-git-master
      - v2-git
  update-git-master: &update-git-master
    name: Update master branch
    command: git fetch --force origin master
  save-git-cache: &save-git-cache
    name: Save git cache
    key: v2-git-{{ .Branch }}-{{ .Revision }}
    paths:
      - ".git"

  restore-npm-cache: &restore-npm-cache
    name: "Restore npm cache"
    keys:
       - v1-npmcache-{{ checksum ".nvmrc" }}-{{ checksum "npm-shrinkwrap.json" }}
       - v1-npmcache-{{ checksum ".nvmrc" }}
  save-npm-cache: &save-npm-cache
    name: "Save npm cache"
    key: v1-npmcache-{{ checksum ".nvmrc" }}-{{ checksum "npm-shrinkwrap.json" }}
    paths:
      - ~/.npm

  # We'll conditionally cache and restore node_modules if
  # .nvmrc and npm-shrinkwrap are identical. We'll use the
  # presence of node_modules to conditionally run npm ci.
  # Do not add any fall backs to restore!
  restore-node-modules-cache: &restore-node-modules-cache
    name: "Restore node_modules cache"
    key: v1-node-modules-{{ checksum ".nvmrc" }}-{{ checksum "npm-shrinkwrap.json" }}
  npm-install: &npm-install
    name: Install npm dependencies
    command: |
      if [ ! -d node_modules ]; then
        npm ci
      fi
  save-node-modules-cache: &save-node-modules-cache
    name: "Save node_modules cache"
    key: v1-node-modules-{{ checksum ".nvmrc" }}-{{ checksum "npm-shrinkwrap.json" }}
    paths:
      - node_modules

  defaults: &defaults
    working_directory: ~/wp-calypso
    docker: *docker-image
    environment: *shared-environment

version: 2
jobs:
  lint:
    <<: *defaults
    parallelism: 1
    steps:
      ###############
      # Basic Setup #
      # #############
      # repo
      - restore_cache: *restore-git-cache
      - checkout
      - run: *update-git-master
      - save_cache: *save-git-cache
      # npm dependencies
      - restore_cache: *restore-npm-cache
      - restore_cache: *restore-node-modules-cache
      - run: *npm-install
      - save_cache: *save-node-modules-cache
      - save_cache: *save-npm-cache
      # folders to collect results
      - run: *setup-results-and-artifacts
      ###################
      # End Basic Setup #
      ###################
      - run:
          name: Lint Config Keys
          command: npm run lint:config-defaults
      - run:
          name: Lint Client and Server
          when: always
          command: |
            # We'll use failure code to do some additional processing and report failure manually
            set +o errexit
            npx --no-install eslint-eslines                           \
              $(                                                      \
                git diff --name-only --diff-filter=d origin/master... \
                | grep -E '^(client|server)'                          \
                | grep -E '\.jsx?$'                                   \
                | circleci tests split                                \
              )                                                       \
              -- --format junit                                       \
              > ~/eslint-results.xml
            # Ensure we don't upload empty reports.
            # Eslint would not produce a malformed empty xml using the --format and -o options.
            # However, with eslint-eslines and the redirected > output, we may get an empty file.
            # We only put the file into the reports directory if the status code informs us that
            # lint issues have been encountered.
            ESLINT_RESULT="$?"
            if [ "$ESLINT_RESULT" -ne 0 ]; then
              mv ~/eslint-results.xml "$CIRCLE_TEST_REPORTS/eslint"
              exit "$ESLINT_RESULT"
            fi
      - store_test_results:
          path: /tmp/test_results
      - store_artifacts:
          path: /tmp/test_results

  test-client:
    <<: *defaults
    parallelism: 6
    steps:
      ###############
      # Basic Setup #
      # #############
      # repo
      - restore_cache: *restore-git-cache
      - checkout
      - run: *update-git-master
      - save_cache: *save-git-cache
      # npm dependencies
      - restore_cache: *restore-npm-cache
      - restore_cache: *restore-node-modules-cache
      - run: *npm-install
      - save_cache: *save-node-modules-cache
      - save_cache: *save-npm-cache
      # folders to collect results
      - run: *setup-results-and-artifacts
      ###################
      # End Basic Setup #
      ###################
      - restore_cache: *restore-jest-cache
      - run:
          name: Run Client Tests
          command: |
            JEST_JUNIT_OUTPUT="$CIRCLE_TEST_REPORTS/client/test-results-client.xml" npx --no-install \
              jest                                    \
                --ci                                  \
                --maxWorkers=2                        \
                --reporters=default                   \
                --reporters=jest-junit                \
                --runTestsByPath                      \
                --silent                              \
                --config=test/client/jest.config.js   \
                $( circleci tests glob "client/**/test/*.js" "client/**/test/*.jsx" | circleci tests split )
      - save_cache: *save-jest-cache
      - store_test_results:
          path: /tmp/test_results
      - store_artifacts:
          path: /tmp/test_results

  test-integration:
    <<: *defaults
    parallelism: 1
    steps:
      ###############
      # Basic Setup #
      # #############
      # repo
      - restore_cache: *restore-git-cache
      - checkout
      - run: *update-git-master
      - save_cache: *save-git-cache
      # npm dependencies
      - restore_cache: *restore-npm-cache
      - restore_cache: *restore-node-modules-cache
      - run: *npm-install
      - save_cache: *save-node-modules-cache
      - save_cache: *save-npm-cache
      # folders to collect results
      - run: *setup-results-and-artifacts
      ###################
      # End Basic Setup #
      ###################
      - restore_cache: *restore-jest-cache
      - run:
          name: Run Integration Tests
          command: |
            if [[ "$RUN_ARGS" != "--nightly" ]]; then
              echo "Regular build: skipping tests."
              exit 0
            fi
            JEST_JUNIT_OUTPUT="$CIRCLE_TEST_REPORTS/integration/test-results-integration.xml" npx --no-install \
              jest                                         \
                --ci                                       \
                --maxWorkers=2                             \
                --reporters=default                        \
                --reporters=jest-junit                     \
                --runTestsByPath                           \
                --silent                                   \
                --config=test/integration/jest.config.js   \
                $( circleci tests glob "bin/**/integration/*.js" "client/**/integration/*.js" "server/**/integration/*.js" | circleci tests split )
      - save_cache: *save-jest-cache
      - store_test_results:
          path: /tmp/test_results
      - store_artifacts:
          path: /tmp/test_results

  test-server:
    <<: *defaults
    parallelism: 2
    steps:
      ###############
      # Basic Setup #
      # #############
      # repo
      - restore_cache: *restore-git-cache
      - checkout
      - run: *update-git-master
      - save_cache: *save-git-cache
      # npm dependencies
      - restore_cache: *restore-npm-cache
      - restore_cache: *restore-node-modules-cache
      - run: *npm-install
      - save_cache: *save-node-modules-cache
      - save_cache: *save-npm-cache
      # folders to collect results
      - run: *setup-results-and-artifacts
      ###################
      # End Basic Setup #
      ###################
      - restore_cache: *restore-jest-cache
      - run:
          name: Run Server Tests
          command: |
            JEST_JUNIT_OUTPUT="$CIRCLE_TEST_REPORTS/server/test-results-client.xml" npx --no-install \
              jest                                    \
                --ci                                  \
                --maxWorkers=2                        \
                --reporters=default                   \
                --reporters=jest-junit                \
                --runTestsByPath                      \
                --silent                              \
                --config=test/server/jest.config.js   \
                $( circleci tests glob "server/**/test/*.js" "server/**/test/*.jsx" | circleci tests split )
      - save_cache: *save-jest-cache
      - store_test_results:
          path: /tmp/test_results
      - store_artifacts:
          path: /tmp/test_results

  translate:
    <<: *defaults
    parallelism: 1
    steps:
      ###############
      # Basic Setup #
      # #############
      # repo
      - restore_cache: *restore-git-cache
      - checkout
      - run: *update-git-master
      - save_cache: *save-git-cache
      # npm dependencies
      - restore_cache: *restore-npm-cache
      - restore_cache: *restore-node-modules-cache
      - run: *npm-install
      - save_cache: *save-node-modules-cache
      - save_cache: *save-npm-cache
      # folders to collect results
      - run: *setup-results-and-artifacts
      ###################
      # End Basic Setup #
      ###################
      - run:
          name: Build calypso-strings.pot
          command: |
            npm run translate
            mv calypso-strings.pot "$CIRCLE_ARTIFACTS/translate"
      - run:
          name: Build New Strings .pot
          command: |
            git clone https://github.com/Automattic/gp-localci-client.git
            bash gp-localci-client/generate-new-strings-pot.sh "$CIRCLE_BRANCH" "$CIRCLE_SHA1" "$CIRCLE_ARTIFACTS/translate"
            rm -rf gp-localci-client
      - store_artifacts:
          path: /tmp/artifacts


# We need to work around this bit because
# the notification system in 2.0 is a bit flakey
# and is not yet working as expected.
notify:
  webhooks:
    - url: https://translate.wordpress.com/api/localci/-relay-new-strings-to-gh

workflows:
  version: 2
  test:
    jobs:
      - lint
      - test-client
      - test-integration
      - test-server
      - translate
