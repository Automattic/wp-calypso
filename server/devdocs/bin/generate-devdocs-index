#!/usr/bin/env node

/**
 * This script generates a Lunr.js index and document array suitable for server-side
 * documentation search. It finds all .md files that are part of the Calypso repository
 * and writes the index to server/devdocs/search-index.js .
 *
 * The design is currently limited by available RAM, both during indexing and serving the
 * content. A more scalable solution would need to use a separate indexing service like Sphinx.
 */

const fs = require( 'fs' );
const fspath = require( 'path' );
const lunr = require( 'lunr' );
const globby = require( 'globby' );
const root = fspath.dirname( fspath.join( __dirname, '..', '..' ) );

function main() {
	// Build a list of all .md files in allowed subdirectories...
	const dirList = [
		'assets',
		'bin',
		'client',
		'config',
		'docs',
		'server',
		'test',
		'.github',
	].map( dir => dir + '/**/*.md' );
	// ... and the current directory
	dirList.push( '*.md' );

	const documents = globby.sync( dirList ).map( fileWithPath => {
		return documentFromFile( root, fileWithPath );
	} ).filter( doc => {
		// skip empty/invalid files
		return doc.title && doc.body;
	} );

	writeSearchIndex( documents, 'server/devdocs/search-index.js' );
}

function writeSearchIndex( documents, searchIndexPath ) {
	const idx = lunr( function() {
		this.field( 'title', { boost: 10 } );
		this.field( 'body' );

		documents.forEach( ( doc, index ) => {
			/*
			 * we use the array index as the document id
			 * so that we can look the preprocessed contents
			 * up out of the "documents" array also exported below
			 */

			const indexDoc = {};
			indexDoc.id = index;
			indexDoc.title = doc.title;

			//preprocess body to remove non-word characters, e.g. <optgroup> becomes optgroup
			indexDoc.body = doc.body.replace(/<>\/="/, ' ');

			this.add( indexDoc );
		} );
	} );

	const searchIndexJS = 'module.exports.index = ' + jsFromJSON( JSON.stringify( idx ) ) + ';' +
		'module.exports.documents = ' + jsFromJSON( JSON.stringify( documents ) ) + ';';

	fs.writeFileSync( fspath.join( root, searchIndexPath ), searchIndexJS );
}

/**
 * Some characters in JSON are invalid in JS. Replace them with ones that are.
 *
 * @copyright (c) 2009-2014 TJ Holowaychuk <tj@vision-media.ca>.
 * @license See CREDITS.md.
 * @see https://github.com/strongloop/express/blob/b78bd3d1fd6caf8228a1875078fecce936cb2e46/lib/response.js#L293
 */
function jsFromJSON( json ) {
	// some characters in JSON are invalid in JS
	// lifted from https://github.com/strongloop/express/blob/b78bd3d1fd6caf8228a1875078fecce936cb2e46/lib/response.js#L293
	return json.replace( /\u2028/g, '\\u2028' ).replace( /\u2029/g, '\\u2029' );
}

/**
 * Strip formatting from content and extract the title and
 * return a basic JSON object suitable for indexing
 */

function documentFromFile( root, fileWithPath ) {
	let data = fs.readFileSync( fspath.join( root, fileWithPath ), { encoding: 'utf8' } );

	// render as markdown so that embedded HTML is properly escaped
	// data = striptags( marked ( data) );

	//strip leading and trailing lines/spaces
	data = data.replace( /^\s*[\r\n]/gm, '' );

	//strip common, noisy markdown stuff
	data = data.replace( /^#+|^={2,}|^-{2,}/gm, '' );

	const firstLineEnd = data.indexOf( '\n' );

	if ( firstLineEnd === -1 ) {
		//this must be an empty file
		return {};
	}

	const title = data.slice( 0, firstLineEnd );
	const body = data.slice( firstLineEnd + 1 );

	return {
		path: fileWithPath,
		title: title,
		body: body
	};
}

main();
