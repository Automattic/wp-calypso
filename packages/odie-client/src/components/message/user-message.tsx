import { ExternalLink } from '@wordpress/components';
import { createInterpolateElement } from '@wordpress/element';
import { __, sprintf } from '@wordpress/i18n';
import { createElement } from 'react';
import Markdown from 'react-markdown';
import { useOdieAssistantContext } from '../../context';
import CustomALink from './custom-a-link';
import { DirectEscalationLink } from './direct-escalation-link';
import { uriTransformer } from './uri-transformer';
import WasThisHelpfulButtons from './was-this-helpful-buttons';
import type { Message } from '../../types/';

export const UserMessage = ( {
	message,
	onDislike,
	isDisliked = false,
}: {
	isDisliked?: boolean;
	message: Message;
	onDislike: () => void;
} ) => {
	const { extraContactOptions, isUserEligible } = useOdieAssistantContext();
	const isRequestingHumanSupport = message.context?.flags?.forward_to_human_support;
	const hasFeedback = !! message?.rating_value;
	const isUser = message.role === 'user';
	const isPositiveFeedback =
		hasFeedback && message && message.rating_value && +message.rating_value === 1;
	const showExtraContactOptions =
		( hasFeedback && ! isPositiveFeedback ) || isRequestingHumanSupport;
	const supportForumWording = __(
		'It sounds like you want to talk to a human. Human support is only available for our [paid plans](https://wordpress.com/pricing/). For community support, visit our forums:',
		__i18n_text_domain__
	);

	const supportHappinessWording = __(
		'It sounds like you want to talk to a human. Weâ€™re here to help! Use the option below to message our Happiness Engineers.',
		__i18n_text_domain__
	);

	const forwardMessage = isUserEligible ? supportHappinessWording : supportForumWording;

	return (
		<>
			<Markdown
				urlTransform={ uriTransformer }
				components={ {
					a: CustomALink,
				} }
			>
				{ isRequestingHumanSupport ? forwardMessage : message.content }
			</Markdown>
			<div className="odie-chatbox-user-message-extra-content-container">
				{ showExtraContactOptions && extraContactOptions }
				{ ! hasFeedback && ! isUser && (
					<WasThisHelpfulButtons
						message={ message }
						onDislike={ onDislike }
						isDisliked={ isDisliked }
					/>
				) }
				{ ! isUser && (
					<>
						<div className="disclaimer">
							{ createInterpolateElement(
								__(
									"<p>Generated by WordPress.com's Support AI.</p>" +
										'<p>AI-generated responses may contain inaccurate information.</p>',
									__i18n_text_domain__
								),
								{
									p: createElement( 'p' ),
								}
							) }
						</div>
					</>
				) }
			</div>
		</>
	);
};
