// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create-reducer.js 1`] = `
"// This comment should be preserved even if the line below is removed.
import { withSchemaValidation, withoutPersistence } from 'state/utils';

const COMPUTED_IDENTIFIER = 'COMPUTED_IDENTIFIER';

const isFetchingSettings = withoutPersistence((state = false, action) => {
    switch (action.type) {
    case COMPUTED_IDENTIFIER:
        return 'computed_id';
    case 'COMPUTED_STRING':
        return state;
    case \\"NON_COMPUTED_STRING\\":
        return action.thing;
    case \\"2\\":
        return 2;
    case \\"FUNCTION_HANDLER\\":
        return function( s, a ) {
            return s;
        }(state, action);
    case \\"ARROW_FUNCTION_HANDLER\\":
        return state;
    case \\"ARROW_FUNCTION_WITH_DESTRUCT\\":
        {
            const { thing } = action;
            return thing;
        }
    case \\"VARIABLE_HANDLER\\":
        return f(state, action);
    }

    return state;
});

function f() {
	return 'a function reducer';
}

const persistentReducer = (state = false, action) => {
    switch (action.type) {
    case COMPUTED_IDENTIFIER:
        return 'computed_id';
    case 'SERIALIZE':
        return state;
    }

    return state;
};

persistentReducer.hasCustomPersistence = true;

export const exportedPersistentReducer = (state = false, action) => {
    switch (action.type) {
    case COMPUTED_IDENTIFIER:
        return 'computed_id';
    case 'SERIALIZE':
        return state;
    }

    return state;
};

exportedPersistentReducer.hasCustomPersistence = true;

const persistentReducerArray = [];
reducerArray[ 0 ] = (state = false, action) => {
    switch (action.type) {
    case COMPUTED_IDENTIFIER:
        return 'computed_id';
    case 'DESERIALIZE':
        return state;
    }

    return state;
};

reducerArray[ 0 ].hasCustomPersistence = true;

const persistentReducerObj = {
	key: // TODO: HANDLE PERSISTENCE
    (state = false, action) => {
        switch (action.type) {
        case COMPUTED_IDENTIFIER:
            return 'computed_id';
        case 'DESERIALIZE':
            return state;
        }

        return state;
    },
};

const validatedReducer = withSchemaValidation(schema, (state = false, action) => {
    switch (action.type) {
    case COMPUTED_IDENTIFIER:
        return 'computed_id';
    }

    return state;
});

"
`;
