/**
 * @group authentication
 *
 * Google blocks Chrome-based browsers that are controlled via automation
 * from performing login to their services.
 * The workaround is to use a non-Google browser, such as Firefox.
 * See: https://stackoverflow.com/questions/66209119/automation-google-login-with-python-and-selenium-shows-this-browser-or-app-may
 * @browser firefox
 */

import { LoginPage, SecretsManager, GoogleLoginPage, TOTPClient } from '@automattic/calypso-e2e';
import { Page, Browser } from 'playwright';

declare const browser: Browser;

describe( 'Authentication: Google', function () {
	const credentials = SecretsManager.secrets.testAccounts.googleLoginUser;

	let page: Page;
	let googlePopupPage: Page;
	let loginPage: LoginPage;
	let googleLoginPage: GoogleLoginPage;
	let totpClient: TOTPClient;

	let windowClosed: boolean;
	let code: string;

	beforeAll( async () => {
		page = await browser.newPage();
	} );

	it( 'Navigate to /login', async function () {
		loginPage = new LoginPage( page );
		await loginPage.visit();

		await page.waitForURL( /log-in/ );
	} );

	it( 'Click on "Continue with Google" button', async function () {
		googlePopupPage = await loginPage.clickLoginWithGoogle();
		await googlePopupPage.waitForURL( /accounts\.google\.com/ );
	} );

	it( 'Enter Google username', async function () {
		await googlePopupPage.waitForURL( /identifier/ );

		googleLoginPage = new GoogleLoginPage( googlePopupPage );
		await googleLoginPage.enterUsername( credentials.username );
		await googleLoginPage.clickButton( 'Next' );
	} );

	it( 'Enter Google password', async function () {
		await googlePopupPage.waitForURL( /challenge/ );

		await googleLoginPage.enterPassword( credentials.password );
		await googleLoginPage.clickButton( 'Next' );
	} );

	it( 'Enter 2FA challenge if required - Challenge 1', async function () {
		page.on( 'close', () => {
			windowClosed = true;
		} );

		try {
			const googlePopupPageClosePromise = googlePopupPage.waitForEvent( 'close' );

			totpClient = new TOTPClient( credentials.totpKey as string );
			code = totpClient.getToken();

			await googleLoginPage.enter2FACode( code );
			await googleLoginPage.clickButton( 'Next' );

			await googlePopupPageClosePromise;
		} catch {
			// noop
		}
	} );

	// In a game of cat and mouse, Google now appears to require
	// two 2FA challege for our `googleLoginUser` account.
	// It is not known why, but the most likely explanation is that
	// this spec has tripped something in the Google backend.
	// The result is that the user is required to enter two sets of
	// TOTP codes, and because the TOTP codes regenerate every 30s
	// this means the spec has to wait until the TOTP code updates.
	// This behavior was confirmed manually by @worldomonation as well.
	it( 'Enter 2FA challenge if required - Challenge 2', async function () {
		if ( windowClosed ) {
			return;
		}

		try {
			const googlePopupPageClosePromise = googlePopupPage.waitForEvent( 'close' );

			// Wait until the TOTP code generated by the client
			// changes, meaning the 30s window has rolled over.
			while ( totpClient.getToken() === code ) {
				console.log(
					`Google Authentication: second 2FA challenge encountered, waiting for TOTP code to change from ${ code }`
				);
				await new Promise( ( resolve ) => setTimeout( resolve, 1000 ) );
			}

			await googleLoginPage.enter2FACode( totpClient.getToken() );
			await googleLoginPage.clickButton( 'Next' );

			await googlePopupPageClosePromise;
		} catch {
			// noop
		}
	} );

	it( 'Redirected to /home upon successful login', async function () {
		await page.waitForURL( /.*\/home\/.*/ );
	} );
} );
