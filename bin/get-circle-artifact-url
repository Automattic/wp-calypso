#!/usr/bin/env node

// This script will return a url of the calypso-strings.pot file generated in our latest master build.
// If passed a `notifications` param (eg. `./bin/get-circle-artifact-url notifications`), it will return
// a URL that is part of the most recent notifications build.
// eg: `node bin/get-circle-string-artifact-url | xargs curl`

const https = require( 'https' );

const baseOptions = {
	host: 'circleci.com',
	port: 443,
	headers: {
		'Accept': 'application/json'
	}
};

const basePath =  '/api/v1.1/project/github/Automattic/wp-calypso';

(async function main() {
	try {
		// Fetch recent successful master builds
		const builds = await httpsGetJsonPromise( {
				...baseOptions,
				path: `${ basePath }/tree/master?filter=successful&limit=20`,
		} );

		const buildNumbersWithArtifacts = builds.filter( build => build.has_artifacts ).map( build => build.build_num );

		const regex = 'notifications' === process.argv[2]
			? /\/notifications-panel/
			: /\/calypso-strings\.pot$/

		for ( const buildNumber of buildNumbersWithArtifacts ) {
			const artifacts = await httpsGetJsonPromise( {
				...baseOptions,
				path: `${ basePath }/${ buildNumber }/artifacts`,
			} );
			const artifact = artifacts.filter( ( artifact ) => artifact.path.match( regex ) ).shift();
			if ( artifact ) {
				console.log( artifact.url );
				process.exit( 0 );
			}
		}

		console.error( 'Failed to find the target artifact in CircleCI.' );
		process.exit( 1 );

	} catch ( e ) {
		console.error( e );
		process.exit( 1 );
	}

	console.error( 'Failed to get recent artifacts from from CircleCI.' );
	process.exit( 1 );
}());

function httpsGetJsonPromise( options ) {
	return new Promise( ( resolve, reject ) => {
		https.get( options, response => {
			let body = '';
			response.on( 'data', data => {
				body += data;
			} );
			response.on( 'end', () => resolve( JSON.parse( body ) ) )
			response.on( 'error', reject );
		} )
	} )
}
