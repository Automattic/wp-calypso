#!/bin/bash

BASEDIR=$(dirname $0)
FAILED=0
FAILED_ROUTES=()
RED='\033[0;31m'
BLUE='\033[0;34m'
NO_COLOR='\033[0m'

if [ "${MULTICORE}" = 1 ]; then
	CORES=${CORES:-}
else
	CORES=1
fi


# print as many equal signs as the terminal is wide
print_horizontal_rule() {
	printf "%$(tput cols)s\n" | tr " " "="
}


__count_core_items() {
	echo $(cat /proc/cpuinfo | grep "$1" | sort -u | wc -l)
}

get_cores__linux() {
	local cpus=$(__count_core_items "physical id")
	local cores=$(__count_core_items "core id")
	echo $((cpus * cores))
}

get_core_count() {
	if [ -z "${CORES}" ]; then
		local cores=1
		# OSX
		which sysctl &>/dev/null && cores=$(sysctl -n hw.physicalcpu)
		# Unix
		test -f /proc/cpuinfo && cores=$(get_cores__linux)
		echo $cores
	else
		echo ${CORES}
	fi
}

__print_usage() {
	printf "$BLUE"
	echo "
*----------------------------------------------------------------------------------------*
| Experimental parallel testing available                                                |
| Usage:                                                                                 |
| export MULTICORE=1 to enable experimental parallel testing.                            |
| export CORES=4 to control the number of cores used. Leave unset to utilize all cores.  |
*----------------------------------------------------------------------------------------*
"
	printf "$NO_COLOR"
}

run_test_fast() {
	echo > .test.log
	local cores=$(get_core_count)
	echo "Using $cores cores" 1>&2
	__print_usage
	xargs -P"${cores}" -I % /bin/bash -c '"$1"/run-tests "$2" || (echo "$2" >> .test.log && false)' -- "${BASEDIR}" %
	local exitcode=$?
	if [ "$exitcode" -ne 0 ]; then
		printf "$RED"
		echo "These tests have failed:"
		cat .test.log | xargs -I % dirname % | xargs /bin/bash -c 'echo $(cd $(dirname "$1") && pwd)/$(basename "$1")' --
		printf "$NO_COLOR"
		echo
	else
		echo "ALL SYSTEMS GO"
	fi
	rm -f .test.log
	exit "$exitcode"
}

__cleanup() {
	echo Cleaning up
	rm -f .test.log
}

trap __cleanup SIGINT SIGTERM

# Run all tests
find {$BASEDIR/../client,$BASEDIR/../server,$BASEDIR} -name Makefile | run_test_fast
