/**
 * External dependencies
 */
const {
	concat,
	flowRight,
	uniqBy
} = require( 'lodash' );
const fs = require( 'fs' );
const nlf = require( 'nlf' );
const path = require( 'path' );

/**
 * Internal dependencies
 */
const { dependencies, devDependencies } = require( '../package.json' );

const allDependencies = Object.keys( Object.assign( {}, devDependencies, dependencies ) );
const projectRoot = path.dirname( __dirname );

const getFileHeader = () => (
	[
		'<!-- This file is automatically generated using `make credits`. -->',
		'Credits',
		'=======',
		'This project makes use of the Open Source packages listed below (see [package.json](/package.json) for a list that is always up-to-date). Their source code and detailed license information are available from [NPM](https://npmjs.org) or [GitHub](https://github.com/). Many thanks to all of the original authors!',
		'',
	].join( '\n' )
);

function extractLicenceInformation( data ) {
	return data.reduce( ( result, module ) => {
		if ( allDependencies.includes( module.name ) ) {
			const summary = uniqBy( module.summary(), name => name.toLowerCase() ).join( ', ' );
			if ( ! result[ summary ] ) {
				result[ summary ] = {};
			}

			result[ summary ][ module.name ] = module.repository;
		}

		return result;
	}, {} );
}

function formatLicenseInformation( licenseInformation ) {
	const header = getFileHeader();
	const output = [];

	Object.keys( licenseInformation ).sort().forEach( ( license ) => {
		const packages = licenseInformation[ license ];

		output.push( `### ${ license }` );

		Object.keys( packages ).forEach( ( name ) => {
			output.push( `* ${ name }: ${ packages[ name ] }` );
		} );

		output.push( '' );
	} );

	return concat( header,  output ).join( '\n' );
}

function saveOutput( output ) {
	fs.writeFile( `${ projectRoot }/CREDITS.md`, output, ( error ) => {
		if ( error ) {
			throw error;
		}

		console.log( 'Generated CREDITS.md file.' );
	} );
}

nlf.find( {
	depth: 0,
	directory: projectRoot,
	summaryMode: 'off',
}, ( error, data ) => {
	if ( error ) {
		throw error;
	}

	flowRight(
		saveOutput,
		formatLicenseInformation,
		extractLicenceInformation
	)( data );
} );