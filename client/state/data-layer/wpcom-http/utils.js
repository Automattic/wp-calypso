/**
 * External dependencies
 */
import { get } from 'lodash';
import { WPCOM_HTTP_REQUEST } from 'state/action-types';

/**
 * Returns response data from an HTTP request success action if available
 *
 * @param {Object} action may contain HTTP response data
 * @returns {?*} response data if available
 */
export const getData = action => get( action, 'meta.dataLayer.data', null );

/**
 * Returns error data from an HTTP request failure action if available
 *
 * @param {Object} action may contain HTTP response error data
 * @returns {?*} error data if available
 */
export const getError = action => get( action, 'meta.dataLayer.error', null );

/**
 * @typedef {Object} ProgressData
 * @property {number} loaded number of bytes already transferred
 * @property {number} total total number of bytes to transfer
 */

/**
 * Returns progress data from an HTTP request progress action if available
 *
 * @param {Object} action may contain HTTP progress data
 * @returns {Object|null} progress data if available
 * @returns {ProgressData}
 */
export const getProgress = action => get( action, 'meta.dataLayer.progress', null );

/**
 * Dispatches to appropriate function based on HTTP request meta
 *
 * @see state/data-layer/wpcom-http/actions#fetch creates HTTP requests
 *
 * When the WPCOM HTTP data layer handles requests it will add
 * response data and errors to a meta property on the given success
 * error, and progress handling actions.
 *
 * This function accepts three functions as the initiator, success,
 * and error handlers for actions and it will call the appropriate
 * one based on the stored meta. It accepts an optional fourth
 * function which will be called for progress events on upload.
 *
 * If both error and response data is available this will call the
 * error handler in preference over the success handler, but the
 * response data will also still be available through the action meta.
 *
 * The functions should conform to the following type signatures:
 *   initiator  :: ReduxStore -> Action -> Dispatcher (middleware signature)
 *   onSuccess  :: ReduxStore -> Action -> Dispatcher -> ResponseData
 *   onError    :: ReduxStore -> Action -> Dispatcher -> ErrorData
 *   onProgress :: ReduxStore -> Action -> Dispatcher -> ProgressData
 *
 * @param {Function} initiator called if action lacks response meta; should create HTTP request
 * @param {Function} onSuccess called if the action meta includes response data
 * @param {Function} onError called if the action meta includes error data
 * @param {Function} [onProgress] called on progress events when uploading
 * @returns {?*} please ignore return values, they are undefined
 */
export const dispatchRequest = ( initiator, onSuccess, onError, onProgress = null ) => ( store, action, next ) => {
	const error = getError( action );
	if ( error ) {
		return onError( store, action, next, error );
	}

	const data = getData( action );
	if ( data ) {
		return onSuccess( store, action, next, data );
	}

	const progress = getProgress( action );
	if ( progress ) {
		return onProgress( store, action, next, progress );
	}

	return initiator( store, action, next );
};

/**
 * Returns true if an action describes a HTTP request
 * @param  {Action}  action the redux action
 * @return {Boolean}        whether or not the action describes an HTTP request
 */
export const isHttpIngress = action => action.type === WPCOM_HTTP_REQUEST;

/**
 * Returns false if the action describes an HTTP response generated by the http middleware
 * @param  {Action}  action the redux action
 * @return {Boolean}        whether or not the action describes an HTTP response
 */
export const isHttpEgress = action => getError( action ) || getData( action );

/**
 * processHttpRequest is a helper function for generating concise and specific http-related middleware.
 * example uses are:
 *  1. deduping inflight GET requests ( see `dedupe-http-inflight.js` )
 *  2. placing requests into a queue, batching them together
 *  3. recording http actions while offline for replaying later
 *
 * note: the generated redux middleware follows the same rules as all regular middlware so order _does_ matter.
 *
 * @param  {Function} handleIngress an uncurried redux middleware function
 *                                  that will only be called for actions representing http middleware requests
 * @param  {Function} handleEgress an uncurried redux middleware function that will be called for all http middleware responses
 * @return {Function}               Standard redux middleware. It will call next() for non-http actions,
 *                                           and will call ingress/egress processors for http-related ones
 */
export const processHttpRequest = ( handleIngress, handleEgress ) => store => next => action => {
	if ( isHttpIngress( action ) ) {
		handleIngress( store, next, action );
	} else if ( isHttpEgress( action ) ) {
		handleEgress( store, next, action );
	} else {
		next( action );
	}
};
