import { useEffect } from 'react';
import difmImage from 'calypso/assets/images/difm/difm.svg';
import QueryProductsList from 'calypso/components/data/query-products-list';
import DIFMLanding from 'calypso/my-sites/marketing/do-it-for-me/difm-landing';
import useBranchSteps from 'calypso/signup/hooks/use-branch-steps';
import StepWrapper from 'calypso/signup/step-wrapper';
import { useDispatch } from 'calypso/state';
import { removeSiteSlugDependency } from 'calypso/state/signup/actions';
import { saveSignupStep, submitSignupStep } from 'calypso/state/signup/progress/actions';
import { ChoiceType } from './types';

import './style.scss';

interface Props {
	goToNextStep: () => void;
	submitSignupStep: ( { stepName, wasSkipped }: { stepName: string; wasSkipped: boolean } ) => void;
	goToStep: ( stepName: string ) => void;
	flowName: string;
	stepName: string;
}

export default function NewOrExistingSiteStep( props: Props ) {
	const dispatch = useDispatch();

	useEffect( () => {
		dispatch( saveSignupStep( { stepName: props.stepName } ) );
	}, [ dispatch, props.stepName ] );

	const branchSteps = useBranchSteps( props.stepName, () => [ 'difm-site-picker' ] );

	const newOrExistingSiteSelected = ( value: ChoiceType ) => {
		// If 'new-site' is selected, skip the `difm-site-picker` step.
		if ( 'new-site' === value ) {
			branchSteps( {} );
			dispatch( removeSiteSlugDependency() );
		}
		dispatch(
			submitSignupStep(
				{ stepName: props.stepName },
				{
					newOrExistingSiteChoice: value,
					forceAutoGeneratedBlogName: true,
				}
			)
		);
		props.goToNextStep();
	};

	return (
		<>
			<QueryProductsList persist />
			<StepWrapper
				stepContent={
					<DIFMLanding
						onPrimarySubmit={ () => newOrExistingSiteSelected( 'existing-site' ) }
						onSecondarySubmit={ () => newOrExistingSiteSelected( 'new-site' ) }
						isInOnboarding={ true }
					/>
				}
				hideFormattedHeader={ true }
				align="left"
				hideSkip
				isHorizontalLayout={ false }
				isWideLayout={ true }
				headerImageUrl={ difmImage }
				{ ...props }
			/>
		</>
	);
}
