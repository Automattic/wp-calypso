/**
 * External dependencies
 */
var React = require( 'react' ),
	debug = require( 'debug' )( 'calypso:me:security:2fa-disable' ),
	bindActionCreators = require( 'redux' ).bindActionCreators,
	connect = require( 'react-redux' ).connect;

/**
 * Internal dependencies
 */
var FormButton = require( 'components/forms/form-button' ),
	FormSectionHeading = require( 'components/forms/form-section-heading' ),
	Security2faStatus = require( 'me/security-2fa-status' ),
	Security2faCodePrompt = require( 'me/security-2fa-code-prompt' ),
	analytics = require( 'lib/analytics' ),
	successNotice = require( 'state/notices/actions' ).successNotice;

const Security2faDisable = React.createClass( {

	displayName: 'Security2faDisable',

	componentDidMount: function() {
		debug( this.constructor.displayName + ' React component is mounted.' );
	},

	componentWillUnmount: function() {
		debug( this.constructor.displayName + ' React component will unmount.' );
	},

	getInitialState: function() {
		return {
			showingCodePrompt: false
		};
	},

	propTypes: {
		onFinished: React.PropTypes.func.isRequired
	},

	onRevealCodePrompt: function() {
		this.setState( { showingCodePrompt: true } );
	},

	onCancelCodePrompt: function() {
		this.setState( { showingCodePrompt: false } );
	},

	onCodePromptSuccess: function() {
		this.setState( { showingCodePrompt: false } );
		this.props.successNotice( this.translate( 'Successfully disabled Two-Step Authentication.' ) );
		this.props.onFinished();
	},

	renderVerificationCodeMeansMessage: function() {
		if ( this.props.userSettings.settings.two_step_sms_enabled ) {
			return (
				<div>
					<p>
						{ this.translate(
							'Your account is currently protected by Two-Step ' +
							'Authentication. While enabled, logging in to WordPress.com ' +
							'requires you to enter a unique passcode, sent via text message, ' +
							'in addition to your username and password.'
						) }
					</p>

					<p>
						{ this.translate(
							'Authentication codes are currently being sent to {{strong}}%(smsNumber)s{{/strong}}. ' +
							'If you wish to change this number, please disable Two-Step Authentication, ' +
							'then go through the setup wizard again.',
							{
								components: {
									strong: <strong />
								},
								args: {
									smsNumber: this.props.userSettings.getSetting( 'two_step_sms_phone_number' )
								}
							}
						) }
					</p>
				</div>
			);
		}

		return (
			<p>
				{ this.translate(
					'Your account is currently protected by Two-Step ' +
					'Authentication. While enabled, logging in to WordPress.com ' +
					'requires you to enter a unique passcode, generated by an app on ' +
					'your mobile device, in addition to your username and password.'
				) }
			</p>
		);
	},

	renderCodePromptToggle: function() {
		if ( this.state.showingCodePrompt ) {
			return (
				<div className="security-2fa-disable__prompt">
					<FormSectionHeading>
						{ this.translate( 'Disable Two-Step Authentication' ) }
					</FormSectionHeading>
					<p>
						{ this.translate(
							'You are about to disable Two-Step Authentication. ' +
							'This means we will no longer ask for your authentication code ' +
							'when you sign into your %(userlogin)s account.',
							{
								args: {
									userlogin: this.props.userSettings.settings.user_login
								}
							}
						) }
					</p>
					<p>
						{ this.translate(
							'This will also disable your Application Passwords, ' +
							'though they will be available again if you choose to re-enable ' +
							'Two-Step Authentication in the future. If you do choose to ' +
							're-enable it, please note that you will need to generate ' +
							'new backup codes.'
						) }
					</p>
					<p>
						{ this.translate(
							'To verify that you wish to disable Two-Step ' +
							'Authentication, please enter the verification code from your ' +
							'device or a backup code and click "Disable Two-Step."'
						) }
					</p>
					<Security2faCodePrompt
						action="disable-two-step"
						onCancel={ this.onCancelCodePrompt }
						onSuccess={ this.onCodePromptSuccess }
						requestSMSOnMount={ this.props.userSettings.settings.two_step_sms_enabled }
						userSettings={ this.props.userSettings }
					/>
				</div>
			);
		}

		return (
			<FormButton isPrimary={ false } scary onClick={ function( event ) {
				analytics.ga.recordEvent( 'Me', 'Clicked On Disable Two-Step Authentication Button' );
				this.onRevealCodePrompt( event );
			}.bind( this ) } >
				{ this.translate( 'Disable Two-Step Authentication' ) }
			</FormButton>
		);
	},

	render: function() {
		return (
			<div>
				{ this.renderVerificationCodeMeansMessage() }
				<Security2faStatus twoStepEnabled={ this.props.userSettings.settings.two_step_enabled } />
				{ this.renderCodePromptToggle() }
			</div>
		);
	}
} );

export default connect(
	null,
	dispatch => bindActionCreators( { successNotice }, dispatch )
)( Security2faDisable );
