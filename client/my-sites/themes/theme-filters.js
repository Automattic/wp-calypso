/**
* Functions for validating theme search filters.
*/

/**
 * External dependencies
 */
import forIn from 'lodash/forIn';

/* eslint-disable */
/* Autogenerated object */
const taxonomies = {
    "color": [
        "black",
        "blue",
        "brown",
        "dark",
        "gray",
        "green",
        "light",
        "orange",
        "pink",
        "purple",
        "red",
        "silver",
        "tan",
        "white",
        "yellow"
    ],
    "column": [
        "four-columns",
        "left-sidebar",
        "one-column",
        "right-sidebar",
        "three-columns",
        "two-columns"
    ],
    "feature": [
        "accessibility-ready",
        "author-bio",
        "blog-excerpts",
        "breadcrumb-navigation",
        "classic-menu",
        "custom-background",
        "custom-colors",
        "custom-header",
        "custom-menu",
        "editor-style",
        "featured-content-with-pages",
        "featured-image-header",
        "featured-images",
        "flexible-header",
        "front-page-post-form",
        "full-width-template",
        "infinite-scroll",
        "microformats",
        "multiple-menus",
        "one-page",
        "post-formats",
        "post-slider",
        "rtl-language-support",
        "site-logo",
        "sticky-post",
        "testimonials",
        "theme-options",
        "threaded-comments",
        "translation-ready",
        "video",
        "wordads"
    ],
    "layout": [
        "fixed-layout",
        "fluid-layout",
        "responsive-layout"
    ],
    "subject": [
        "announcement",
        "art",
        "artwork",
        "blog",
        "business",
        "cartoon",
        "collaboration",
        "craft",
        "design",
        "education",
        "fashion",
        "food",
        "gaming",
        "holiday",
        "hotel",
        "journal",
        "lifestream",
        "magazine",
        "major-league-baseball",
        "mlb",
        "music",
        "nature",
        "news",
        "outdoors",
        "partner",
        "photoblogging",
        "photography",
        "portfolio",
        "productivity",
        "real-estate",
        "school",
        "scrapbooking",
        "seasonal",
        "sports",
        "travel",
        "tumblelog",
        "video",
        "wedding"
    ],
    "style": [
        "abstract",
        "artistic",
        "bright",
        "clean",
        "colorful",
        "conservative",
        "contemporary",
        "curved",
        "dark",
        "earthy",
        "elegant",
        "faded",
        "flamboyant",
        "flowery",
        "formal",
        "funny",
        "futuristic",
        "geometric",
        "glamorous",
        "grungy",
        "hand-drawn",
        "handcrafted",
        "humorous",
        "industrial",
        "light",
        "metallic",
        "minimal",
        "modern",
        "natural",
        "paper-made",
        "playful",
        "professional",
        "retro",
        "simple",
        "sophisticated",
        "tech",
        "textured",
        "traditional",
        "urban",
        "vibrant",
        "whimsical"
    ]
};
/* eslint-enable */

let termTable;

/**
 * @return {Object} a table of terms to taxonomies.
 */
function getTermTable() {
	if ( ! termTable ) {
		termTable = {};
		forIn( taxonomies, ( terms, taxonomy ) => {
			terms.forEach( ( term ) => {
				termTable[ term ] = taxonomy;
			} );
		} );
	}
	return termTable;
}

/**
 * Given the value part, returns a complete filter
 * in "key:value" search-box format.
 *
 * @param {string} value - the term part of a filter
 * @returns {string} - complete key:value filter, or empty string if value is not a term
 */
export function getFilterFromValue( value ) {
	const terms = getTermTable();
	if ( terms[ value ] ) {
		return `${ terms[ value ] }:${ value }`;
	}
	return '';
}

/**
 * Checks that [key, value] is a valid [taxonomy, term] pair.
 *
 * @param {string} key - taxonomy
 * @param {string} value - term
 * @returns {boolean} true if pair is valid
 */
export function filterIsValid( key, value ) {
	return getTermTable()[ value ] === key;
}
